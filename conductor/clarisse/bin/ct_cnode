#!/usr/bin/env python
import os
import re
import errno
import sys
import argparse
import subprocess


def mkdir_p(dirs):
    """Make directories unless they already exist."""
    for d in dirs:
        try:
            os.makedirs(d)
            print "Made Directory:", d
        except OSError as ex:
            if ex.errno == errno.EEXIST and os.path.isdir(d):
                pass
            else:
                raise


def main():
    """Wrapper to run cnode while making directories first.

    Needed because clarisse allows multiple images to be rendered, and
    each may have a different save_as destination. Arg parser splits the
    args into -directory args and other args. It then makes the
    directories and sends all other args on to cnode.  At some point we
    may display task progress, so this script does some rudimentary
    formatting, which can be changed when its needed for real.
    """
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('-directories', nargs='*', required=False)
    args, pass_through_args = parser.parse_known_args()
    if args.directories:
        mkdir_p(args.directories)

    cnode_args = ["cnode"]
    if pass_through_args:
        cnode_args += pass_through_args

    p = subprocess.Popen(
        cnode_args,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)

    progress_re = re.compile(r'.*Progress for \'(.*)\' : ([\d\.]+)%$')
    subprogress_re = re.compile(r'.*Subprogress.*$')

    sys.stdout.flush()
    for line in iter(p.stdout.readline, b''):
        sys.stdout.flush()
        stripped_line = line.strip()
        # Ignore empty lines and Subprogress lines.
        if not stripped_line:
            continue
        if re.match(subprogress_re, stripped_line):
            continue

        match = re.match(progress_re, stripped_line)
        if match:
            prog = "{} {}%\n".format(match.group(1), match.group(2))
            sys.stdout.write(prog)
        else:
            sys.stderr.write(">>> {}\n".format(stripped_line))
    sys.stdout.flush()

main()
